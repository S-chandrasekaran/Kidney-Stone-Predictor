# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vlQzA3RPXzLxEONQLfx3HuUntBKV1LRr
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load dataset
df = pd.read_csv("kidney_stone_data.csv")

# Drop index column if present
df.drop(columns=df.columns[0], inplace=True)

# Features and target
X = df.drop("target", axis=1)
y = df["target"]

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))d
import streamlit as st
import numpy as np

st.title("Kidney Stone Prediction App")

# Input fields
gravity = st.slider("Urine Specific Gravity", 1.005, 1.035, step=0.001)
ph = st.slider("Urine pH", 4.5, 8.0, step=0.1)
osmo = st.slider("Osmolality", 100, 1300)
cond = st.slider("Conductivity", 5.0, 40.0)
urea = st.slider("Urea (mg/dL)", 10, 650)
calc = st.slider("Calcium (mg/dL)", 0.1, 15.0)

# Predict button
if st.button("Predict"):
    input_data = np.array([[gravity, ph, osmo, cond, urea, calc]])
    input_scaled = scaler.transform(input_data)
    prediction = model.predict(input_scaled)
    result = "High Risk of Kidney Stone" if prediction[0] == 1 else "Low Risk"
    st.success(f"Prediction: {result}")